Menu="UNRAID-OS"
Title="System Devices"
Icon="icon-hardware"
Tag="server"
---
<?PHP
/* Copyright 2005-2023, Lime Technology
 * Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<script>
$(function(){
  $('#t1').load('/webGui/include/SysDevs.php',{table:'t1'});
  $('#t2').load('/webGui/include/SysDevs.php',{table:'t2'});
  $('#t3').load('/webGui/include/SysDevs.php',{table:'t3'});
  $('#t4').load('/webGui/include/SysDevs.php',{table:'t4'});
});
function applyCfg() {
  var message = "_(System Devices)_: _(A reboot is required to apply changes)_";
  var string = "BIND=";
  var elements = document.getElementById("vfiopci").elements;
  for (var i = 0, element; element = elements[i++];) {
    if (element.type === "checkbox"  && element.checked === true)
    string = string + element.value + " ";
  }
  string = string.trim();
  if (string === "BIND=") {
    string = "";
  }
  $.post( "/plugins/dynamix/include/update.vfio-pci-cfg.php", { cfg: string } )
  .done(function(d) {
    if (d==1) {
      addRebootNotice(message);
      document.getElementById("warning").innerHTML = "<b>_(ALERT)_: _(Changes saved)_. _(Reboot to take effect)_.</b>";
    } else {
      removeRebootNotice(message);
      document.getElementById("warning").innerHTML = "<b>_(No changes)_.</b>";
    }
    $("#applycfg").attr("disabled",true);
  });
}
function formatFullInput(input) {
    return input
        .split(';')
        .filter(Boolean) // remove empty trailing entry
        .map(entry => {
            let [pci, status] = entry.split(',');
            status = status.charAt(0).toUpperCase() + status.slice(1).toLowerCase();
            return `${pci} _(${status})_`;
        })
        .join('<br>');
}
function formatVMS(input) {
    return input
        .split(';')
        .filter(Boolean) // remove empty trailing entry
        .join('<br>');
}
function ackPCI(pcidevice, action) {
  $.post('/webGui/include/PCIUpdate.php', { action: "getvm", pciid: pcidevice }).done(function(vms) {
    let swaltext = "";

    switch(action) {
      case 'removed':
        swaltext = "_(Acknowledge removal of PCI Address)_: " + pcidevice + "<br>_(VMs where PCI device used)_<br>" + formatVMS(vms);
        break;
      case 'changed':
        swaltext = "_(Acknowledge update of PCI Address)_: " + pcidevice + "<br>_(VMs where PCI device used)_<br>"+ formatVMS(vms);
        break;
      case 'added':
        swaltext = "_(Acknowledge addition of PCI Address)_: " + pcidevice + "<br>_(VMs where PCI device used)_<br>" + formatVMS(vms);
        break;
      case 'all':
        swaltext = "_(Acknowledge all PCI Address modifications)_: <br>" + formatFullInput(pcidevice) + "<br>_(VMs where PCI device used)_<br>" + formatVMS(vms);
        break;
    }

    swal({
      title: "Are you sure?",
      text: swaltext,
      type: "warning",
      html: true,
      showCancelButton: true
    }, function() {
      $.post('/webGui/include/PCIUpdate.php', { action: action, pciid: pcidevice }).done(function(d) {
        if (d === "OK") {
          $('#t1').load('/webGui/include/SysDevs.php', { table: 't1' });
        }
      });
    });
  });
}

</script>

<?exec('ls /sys/kernel/iommu_groups/',$groups); ?>
<?if (count($groups) > 0):?>
**_(PCI Devices and IOMMU Groups)_**
<?else:?>
**_(PCI Devices (No IOMMU Groups Available))_**
<?endif;?>

> This displays a list of IOMMU groups available on your system along with the output of the `lspci` command for each IOMMU group.  The numeric identifiers are used to configure PCI pass-through.
> 
> Devices you select will be bound to the vfio-pci driver at boot, which makes them available for assignment to a virtual machine, and also prevents the Linux kernel from automatically binding them to any present host driver.
> 
> **Note that selecting a device will bind not only the specified device(s), but *all* other devices in the same IOMMU group as well.**
> 
> &nbsp;<i class="fa fa-circle orb green-orb middle"></i>&nbsp;This symbol indicates the device is currently bound to the vfio-pci driver.
> 
> &nbsp;<i class="fa fa-retweet grey-orb middle"></i>&nbsp;&nbsp;&nbsp;This symbol indicates the device supports FLR (Function Level Reset).
> 
> <input type="checkbox" value="" disabled>&nbsp;&nbsp;If a checkbox is greyed out it means the device is in use by Unraid OS and can not be passed through.

<?if (strpos(file_get_contents('/proc/cmdline'), 'pcie_acs_override=') !== false):?>
<p class="notice" style="line-height:30px;height:auto">_(Warning)_: _(Your system has booted with the PCIe ACS Override setting enabled)_. _(The below list doesn't not reflect the way IOMMU would naturally group devices)_.<br>
<?=my_hyperlink(_("To see natural IOMMU groups for your hardware, go to the [VM Manager] page and set the **PCIe ACS override** setting to **Disabled**"),'/Settings/VMSettings')?>.</p>
<?endif;?>

<pre><form id="vfiopci" class="js-confirm-leave" onsubmit="return false"><table id='t1' class='pre'><tr><td><div class="spinner"></div></td></tr></table></form></pre><br>

**_(CPU Thread Pairings)_**

> This displays a list of CPU thread pairings.

<pre><table id='t2' class='pre'><tr><td><div class="spinner"></div></td></tr></table></pre><br>

**_(USB Devices)_**

> This displays the output of the `lsusb` command.  The numeric identifiers are used to configure PCI pass-through.

<pre><table id='t3' class='pre'><tr><td><div class="spinner"></div></td></tr></table></pre><br>

**_(SCSI Devices)_**

> This displays the output of the `lsscsi` command.  The numeric identifiers are used to configure PCI pass-through.
> 
> Note that linux groups ATA, SATA and SAS devices with true SCSI devices.

<pre><table id='t4' class='pre'><tr><td><div class="spinner"></div></td></tr></table></pre>
<input type="button" value="_(Done)_" onclick="done()">
